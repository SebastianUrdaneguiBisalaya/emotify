"use server";

import { streamObject } from "ai";
import { google } from "@ai-sdk/google";
import { createStreamableValue } from "ai/rsc";
import { z } from "zod";
import { History } from "@/components/types";

export async function generate(input: string, history: History[]) {
  "use server";

  const stream = createStreamableValue();

  (async () => {
    const { partialObjectStream } = streamObject({
      model: google("gemini-2.0-flash"),
      system: "",
      messages: [
        ...history.map((item) => {
          return {
            role: item.role,
            content: item.content,
            songs: item.songs,
          };
        }),
        {
          role: "user",
          content: input,
        },
      ],
      temperature: 0.3,
      maxRetries: 3,
      schema: z.object({
        data: z.object({
          response: z
            .string()
            .describe(
              "Message just text format generated by the AI model depending for response the user input without adding the song list."
            ),
          songs: z.array(
            z.object({
              title: z.string().describe("The title of the song"),
              artist: z.string().describe("The artist of the song"),
            })
          ),
        }),
      }),
    });

    for await (const partialObject of partialObjectStream) {
      stream.update(partialObject);
    }

    stream.done();
  })();

  return {
    object: stream.value,
  };
}
